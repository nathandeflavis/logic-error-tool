package ui.jp;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.ListModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import maths.ae.Node;
import maths.ae.Operation;

/**
 * A JPanel where the user can check for arithmetic expression error.
 */
public class ArithmeticExpressionPanel extends javax.swing.JPanel {

    private final Map<String, Node> node_namesToVals;

    /**
     * Creates new form ArithmeticExpressionPanel
     */
    public ArithmeticExpressionPanel() {
        initComponents();

        node_namesToVals = new HashMap<>();

        for (String name : new String[]{"RESULT", "STORAGE"}) {
            node_namesToVals.put(name, new Node("0"));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        operationComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        aTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        bTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        expressionTextField = new javax.swing.JTextField();
        checkButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        instructionList = new javax.swing.JList<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        jLabel1.setText("Instruction");

        jLabel2.setText("Operation");

        operationComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ADD", "DIVIDE", "EXPONENTIATE", "MULTIPLY", "STORE", "SUBTRACT" }));

        jLabel3.setText("a");

        aTextField.setName("a"); // NOI18N

        jLabel4.setText("b");

        bTextField.setName("b"); // NOI18N

        jLabel5.setText("Instructions");

        addButton.setText("Add");
        addButton.setEnabled(false);

        removeButton.setText("Remove");
        removeButton.setEnabled(false);

        jLabel6.setText("Expression");

        expressionTextField.setName(""); // NOI18N

        checkButton.setText("Check");

        jScrollPane2.setViewportView(instructionList);
        instructionList.setModel(new DefaultListModel<>());
        instructionList.addListSelectionListener(new ListSelectionListenerImpl());

        jLabel7.setText("Special variables:");

        jLabel8.setText("• RESULT");

        jLabel9.setText("• STORAGE");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(operationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(bTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel9))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(aTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel8)))))
                            .addComponent(addButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(expressionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(checkButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removeButton))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(operationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(aTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(bTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(expressionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkButton))
                    .addComponent(removeButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        operationComboBox.addActionListener(new ComboBoxActionListener());
        (aTextField.getDocument()).addDocumentListener(new OperandTextFieldDocumentListenerImpl());
        (bTextField.getDocument()).addDocumentListener(new OperandTextFieldDocumentListenerImpl());
        addButton.addActionListener(new AddButtonActionListenerImpl());
        removeButton.addActionListener(new RemoveButtonActionListenerImpl());
        checkButton.addActionListener(new CheckButtonActionListenerImpl(this));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField aTextField;
    private javax.swing.JButton addButton;
    private javax.swing.JTextField bTextField;
    private javax.swing.JButton checkButton;
    private javax.swing.JTextField expressionTextField;
    private javax.swing.JList<String> instructionList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> operationComboBox;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables

    private void updateAddButton() {
        boolean shouldBeEnabled = true;

        if (!((String) operationComboBox.getSelectedItem()).equals("STORE")) {
            for (JTextField operandTextField : new JTextField[]{aTextField, bTextField}) {
                String operand = operandTextField.getText();

                for (String s : new String[]{"(", ",", " ", ")"}) {
                    operand = operand.replace(s, "");
                }

                if (operand.isEmpty()) {
                    shouldBeEnabled = false;
                    break;
                }
            }
        }

        addButton.setEnabled(shouldBeEnabled);
    }

    private class AddButtonActionListenerImpl implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            String operationString
                    = (String) operationComboBox.getSelectedItem();
            String instructionString = operationString;

            if (!operationString.equals("STORE")) {
                instructionString += "(" + aTextField.getText() + ", "
                        + bTextField.getText() + ")";
            }

            ((DefaultListModel<String>) instructionList.getModel()).addElement(instructionString);
        }
    }

    private class RemoveButtonActionListenerImpl implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            ((DefaultListModel) instructionList.getModel()).remove(instructionList.getSelectedIndex());
        }
    }

    private class CheckButtonActionListenerImpl implements ActionListener {

        ArithmeticExpressionPanel panel;

        CheckButtonActionListenerImpl(ArithmeticExpressionPanel panel) {
            this.panel = panel;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            ListModel<String> model = instructionList.getModel();

            for (int i = 0; i < model.getSize(); i++) {
                String instruction = model.getElementAt(i);

                switch (instruction) {
                    case "STORE":
                        try {
                            //clone result
                            node_namesToVals.put("STORAGE", (Node) (node_namesToVals.get("RESULT")).clone());
                        } catch (CloneNotSupportedException ex) {
                            throw new RuntimeException(ex);
                        }
                        break;
                    default:
                        //instruction format: "<OPERATION>(<operand 1>, <operand 2>)"
                        String[] instructionParts = instruction.split("\\(");
                        instructionParts[1] = instructionParts[1].replace(")", "");
                        String[] operandStrings = instructionParts[1].split(",");
                        operandStrings[1] = operandStrings[1].trim();
                        int numOperands = operandStrings.length;
                        Node[] operandNodes = new Node[numOperands];

                        for (int j = 0; j < numOperands; j++) {
                            String operandString = operandStrings[j];
                            operandNodes[j] = operandString.equals("RESULT") || operandString.equals("STORAGE") ? node_namesToVals.get(operandString) : new Node(operandString);
                        }

                        node_namesToVals.put("RESULT", new Node(Operation.valueOf(instructionParts[0]), operandNodes[0], operandNodes[1]));
                }
            }

            String result = (node_namesToVals.get("RESULT")).toString();

            if ((trimAll(expressionTextField.getText())).equals(trimAll(result))) {
                JOptionPane.showMessageDialog(panel, "Expression is correct");
            } else if (JOptionPane.showConfirmDialog(panel, "Expression is incorrect. Change to '" + result + "'?", "Error check", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                expressionTextField.setText(result);
            }
        }

        //remove all spaces from string
        String trimAll(String str) {
            return str.replace(" ", "");
        }
    }

    private class ComboBoxActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            updateAddButton();
        }
    }

    private class OperandTextFieldDocumentListenerImpl
            implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            updateAddButton();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            updateAddButton();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            updateAddButton();
        }
    }

    private class ListSelectionListenerImpl implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            removeButton.setEnabled(instructionList.getSelectedIndex() != -1);
        }
    }
}
