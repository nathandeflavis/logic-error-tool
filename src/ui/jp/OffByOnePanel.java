package ui.jp;

import ui.lec.CorrectionOptionDialog;
import ui.AbstractTableModelImpl;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import cs.Guard;
import cs.loop.ArithmeticLoop;
import cs.loop.Loop;
import cs.ArrayPositionRange;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import maths.Relation;
import maths.is.ArithmeticInfiniteSequence;
import maths.is.InfiniteSequence;
import ui.lec.CorrectionRequestListener;

/**
 * A JPanel where the user can check for off-by-one error.
 */
public class OffByOnePanel extends javax.swing.JPanel implements CorrectionRequestListener {

    private final Map<String, Integer> intField_namesToVals;

    /**
     * Creates new form OffByOnePanel
     */
    public OffByOnePanel() {
        initComponents();
        intField_namesToVals = new HashMap<>();

        for (JTextField textField : new JTextField[]{startTextField, endTextField, aTextField, bTextField}) {
            intField_namesToVals.put(textField.getName(), null);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        startTextField = new javax.swing.JTextField();
        endTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        aTextField = new javax.swing.JTextField();
        RComboBox = new javax.swing.JComboBox<>();
        bTextField = new javax.swing.JTextField();
        dComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        checkButton = new javax.swing.JButton();

        jLabel1.setText("Array position range (first position is 1)");

        jLabel2.setText("Start position");

        jLabel3.setText("End position");

        startTextField.setName("Start position"); // NOI18N

        endTextField.setName("End position"); // NOI18N

        jLabel5.setText("Expected loop to traverse corresponding array index range");

        jLabel6.setText("Initialisation: i =");

        jLabel7.setText("Guard: i");

        jLabel8.setText("Final expression: i = i +");

        aTextField.setName("a"); // NOI18N

        RComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<", "≤", ">", "≥" }));
        RComboBox.setName("R"); // NOI18N

        bTextField.setName("b"); // NOI18N

        dComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "-1" }));
        dComboBox.setName("d"); // NOI18N

        jLabel4.setText("a");

        jLabel9.setText("R");

        jLabel10.setText("b");

        jLabel11.setText("d");

        checkButton.setText("Check");
        checkButton.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(endTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(startTextField)))
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel11))))
                    .addComponent(checkButton)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(bTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(aTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(4, 4, 4)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(aTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(dComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        (startTextField.getDocument()).addDocumentListener(new ArrayFieldDocumentListenerImpl(startTextField));
        (endTextField.getDocument()).addDocumentListener(new ArrayFieldDocumentListenerImpl(endTextField));
        (aTextField.getDocument()).addDocumentListener(new LoopFieldDocumentListenerImpl(aTextField));
        (bTextField.getDocument()).addDocumentListener(new LoopFieldDocumentListenerImpl(bTextField));
        checkButton.addActionListener(new CheckButtonActionListenerImpl(this));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> RComboBox;
    private javax.swing.JTextField aTextField;
    private javax.swing.JTextField bTextField;
    private javax.swing.JButton checkButton;
    private javax.swing.JComboBox<String> dComboBox;
    private javax.swing.JTextField endTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField startTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void correctionRequested(Map<String, Object> namesToValues) {
        for (String key : new String[]{"a", "b"}) {
            intField_namesToVals.put(key, (Integer) namesToValues.get(key));
        }

        for (JTextField textField : new JTextField[]{aTextField, bTextField}) {
            textField.setText("" + intField_namesToVals.get(textField.getName()));
        }

        for (JComboBox comboBox : new JComboBox[]{RComboBox, dComboBox}) {
            comboBox.setSelectedItem(namesToValues.get(comboBox.getName()));
        }
    }

    private class CheckButtonActionListenerImpl implements ActionListener {

        OffByOnePanel panel;

        CheckButtonActionListenerImpl(OffByOnePanel panel) {
            this.panel = panel;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            ArrayPositionRange apr = new ArrayPositionRange(intField_namesToVals.get("Start position"), intField_namesToVals.get("End position"));
            List<Loop> loops = apr.getTraversingLoops();
            Loop expectedLoop = new ArithmeticLoop(new ArithmeticInfiniteSequence(intField_namesToVals.get("a"), Integer.parseInt((String) dComboBox.getSelectedItem())), new Guard(Relation.values()[RComboBox.getSelectedIndex()], intField_namesToVals.get("b")));

            for (Loop loop : loops) {
                if (loop.equals(expectedLoop)) {
                    JOptionPane.showMessageDialog(panel, "Loop is correct (no off-by-one error)");
                    return;
                }
            }

            (new CorrectionOptionDialog("Loop is incorrect (likely off-by-one error)", new AbstractTableModelImpl(getRowData_correctionTable(apr), getColumnData_correctionTable()), panel)).setVisible(true);
        }

        Object[][] getRowData_correctionTable(ArrayPositionRange apr) {
            List<Loop> loops = apr.getTraversingLoops();
            int numRows = loops.size();
            Object[][] rowData = new Object[numRows][getColumnData_correctionTable().length];

            for (int row = 0; row < numRows; row++) {
                Loop loop = loops.get(row);
                InfiniteSequence is = loop.getIS();
                Guard guard = loop.getGuard();
                rowData[row] = new Object[]{is.getA(), (guard.getR()).toString(), guard.getB(), ((ArithmeticInfiniteSequence) is).getD()};
            }

            return rowData;
        }

        Object[] getColumnData_correctionTable() {
            return new Object[]{"a", "R", "b", "d"};
        }
    }

    private class ArrayFieldDocumentListenerImpl implements DocumentListener {

        JTextField textField;

        ArrayFieldDocumentListenerImpl(JTextField textField) {
            this.textField = textField;
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            handleUpdate();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            handleUpdate();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            handleUpdate();
        }

        void handleUpdate() {
            Integer val;

            try {
                val = Integer.parseInt(textField.getText());

                if (val < 1) {
                    val = null;
                }
            } catch (NumberFormatException e) {
                val = null;
            }

            intField_namesToVals.put(textField.getName(), val);
            checkButton.setEnabled(!intField_namesToVals.containsValue(null));
        }
    }

    private class LoopFieldDocumentListenerImpl implements DocumentListener {

        JTextField textField;

        LoopFieldDocumentListenerImpl(JTextField textField) {
            this.textField = textField;
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            handleUpdate();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            handleUpdate();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            handleUpdate();
        }

        void handleUpdate() {
            Integer val;

            try {
                val = Integer.parseInt(textField.getText());
            } catch (NumberFormatException e) {
                val = null;
            }

            intField_namesToVals.put(textField.getName(), val);
            checkButton.setEnabled(!intField_namesToVals.containsValue(null));
        }
    }
}
